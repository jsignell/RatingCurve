# -*- coding: utf-8 -*-
# <nbformat>3.0</nbformat>

# <headingcell level=2>

# Rating Curve Calculation Land

# <markdowncell>

# This is where you make rating curves and use them to translate the OTT depth data into flow data

# <codecell>

%matplotlib inline
import pandas as pd
import xlrd
import matplotlib.pyplot as plt

# <headingcell level=4>

# Rating curve polynomial fit equations from excel as a cheat/check:

# <codecell>

fitDD

# <rawcell>

#     DD = 0.0026*x^2 - 0.236 * x + 5.0208
#     PH = 0.0026*x^2 - 0.1152*x + 3.7899
#     NM = 0.0017*x^2 - 0.0377*x + 0.276

# <headingcell level=4>

# Import spreadsheets

# <codecell>

cd Desktop\Data

# <codecell>

xl = pd.ExcelFile("OTT_Data_All_stations.xlsx")
xl.sheet_names

# <codecell>

xl2 = pd.ExcelFile("Rating_Curve_Calculations.xlsx")
xl2.sheet_names

# <headingcell level=4>

# Read in the files to DataFrame objects

# <codecell>

df = pd.read_excel(xl.io,
              0,
              skiprows = 1, 
              usecols = [0,1],
              headers = None,
              names = ['date_time', '%s_depth' % xl.sheet_names[0]],
              parse_dates = 0,
              index_col = 0)

# <codecell>

for i in range(1,len(xl.sheet_names)):
    dfi = pd.read_excel(xl.io,
              i,
              skiprows = 1, 
              usecols = [0,1],
              headers = None,
              names = ['date_time', '%s_depth' % xl.sheet_names[i]],
              parse_dates = 0,
              index_col = 0)
    df = df.join(dfi, how = 'outer', lsuffix='_l')

# <codecell>

dfPH = xl2.parse('Rating Curves',
              skiprows = 2, 
              skip_footer = 11, 
              parse_cols = [1,2,3,4],
              header = None,
              names = ['date','time','%s_depth' % xl.sheet_names[0],'%s_flow' % xl.sheet_names[0]],
              parse_dates = [[0,1]], 
              index_col = 0)
dfPH = dfPH.dropna(how = 'any')

# <codecell>

dfDD = xl2.parse('Rating Curves',
              skiprows = 2,  
              parse_cols = [5,6,7,9],
              header = None,
              names = ['date','time','%s_depth' % xl.sheet_names[1],'%s_flow' % xl.sheet_names[1]],
              parse_dates = [[0,1]], 
              index_col = 0)
dfDD = dfDD.dropna(how = 'any')

# <codecell>

dfNM = xl2.parse('Rating Curves',
              skiprows = 2, 
              skip_footer = 20, 
              parse_cols = [10,11,12,13],
              header = None,
              names = ['date','time','%s_depth' % xl.sheet_names[3],'%s_flow' % xl.sheet_names[3]],
              parse_dates = [[0,1]], 
              index_col = 0)
dfNM = dfNM.dropna(how = 'any')

# <codecell>

for i in [dfPH,dfDD,dfNM]:
    i.plot(x = 0, y = 1, kind = 'scatter', figsize = (8,2))

# <headingcell level=4>

# Find the best fits to get rating curve equations

# <codecell>

fitPH = polyfit(dfPH['Princess Hilda_depth'], dfPH['Princess Hilda_flow'],2)
fitDD = polyfit(dfDD['Doldol bridge_depth'], dfDD['Doldol bridge_flow'],2)
fitNM = polyfit(dfNM['Nanyuki-Meru bridge_depth'], dfNM['Nanyuki-Meru bridge_flow'],2)

# <headingcell level=4>

# Using the fit to get the estimated flow

# <codecell>

x = df['Princess Hilda_depth']
df['Princess Hilda_flow']=  fitPH[0]*x**2 + fitPH[1]*x + fitPH[2]
df.loc[df['Princess Hilda_flow']<0,'Princess Hilda_flow'] = 0

# <codecell>

x = df['Doldol bridge_depth']
df['Doldol bridge_flow']= fitDD[0]*x**2 + fitDD[1]*x + fitDD[2]
df.loc[df['Doldol bridge_flow']<0,'Doldol bridge_flow'] = 0

# <codecell>

x = df['Nanyuki-Meru bridge_depth']
df['Nanyuki-Meru bridge_flow']=  fitNM[0]*x**2 + fitNM[1]*x + fitNM[2]
df.loc[df['Nanyuki-Meru bridge_flow']<0,'Nanyuki-Meru bridge_flow'] = 0

# <codecell>

df = df.dropna(how = 'all')

# <headingcell level=4>

# Create a DataFrame with only the calculated flow values

# <codecell>

df_flow = pd.DataFrame( index = df.index)
for i in range(len(df.columns)):
    if 'flow' in df.columns[i]:
        df_flow[df.columns[i]] =df[df.columns[i]]

# <codecell>

df_2hour = df_flow.resample('120min')

# <codecell>

df_2hour.plot(color = ('b', 'g', 'c'),figsize = (17,6))
plt.ylabel('Calculated Discharge [m^3/s]')
plt.xlabel(' ')
plt.axhline(y = 27, color = 'r')
plt.ylim(0,100)

# <codecell>

df_meas = dfPH.join(dfDD, how = 'outer')
df_meas = df_meas.join(dfNM, how = 'outer')
df_meas = df_meas.resample('5min')
df_meas = df_meas.dropna(how = 'all')

# <codecell>

df_all = df_flow.join(df_meas, how = 'inner', lsuffix= '_calc')
df_all = df_all.dropna(how = 'all')

